(function() {
  var activeTimeTrack, background, black, blackOverlay, blueOverlay, captureKeys, cellHeight, cellLeftPadding, changeDay, changeVirtualCursor, channelIdent, channels, checkHighlightPos, closeHandler, convertToPixel, darkGrey3, data, dateModifier, dateTrack, dateTrackContainer, dateTrackHeader, dayModifier, dayTrack, deselectCell, deselectRow, disengageHyperSpeed, divider, drawSeparator, drawTitle, dumbVariable, engageHyperSpeed, eventDivider, eventHandler, eventParent, eventTitle, expansionCleverness, expansionTimeout, extension, fastScroll, fillDateTrack, fillRows, filter, filterContainer, filterDividerBottom, filterDividerTop, filterLayer, filterSelected, filterSelection, filterText, filters, fixDividers, getDate, getDay, getTime, goDown, goLeft, goRight, goUp, hX, hY, header, hideEverything, hideLegend, hideTime, highlightFilter, highlightStartEnd, highlightTitle, hyperSpeed, i, init, l, legend, legendTimeout, m, maxExpansion, menuHighlight, menuHighlightGlow, minute, n, nextX, nowLineTimeout, nowline, o, openGuide, popOutHighlight, popOutPadding, record, ref, ref1, ref2, rowDivider, rowEvents, scroll, scrollingDate, scrollingDay, selectFilter, selectedDate, selectedRow, separatorOpacity, serviceList, showEverything, showLegend, showNextRow, showPreviousRow, showTime, styleHighlight, synopsis, timeContainer, timeElapsed, timeTrack, timeTrackDefaults, times, trackChanged, tune, tuned, tunedChannel, tvShow, unselectedSecondLineOpacity, veryDarkGrey4, veryDarkGrey5, virtualCursor, white, youviewBlue, youviewBlue2, youviewBlue3, youviewGrey1, youviewGrey2;

  data = JSON.parse(Utils.domLoadDataSync('data/programmeData.json'));

  hyperSpeed = false;

  youviewBlue = '#00a6ff';

  youviewBlue2 = '#0F5391';

  youviewBlue3 = 'rgba(0, 51, 102, 0.8);';

  youviewGrey1 = '#b6b9bf';

  youviewGrey2 = '#83858a';

  darkGrey3 = '#505359';

  black = '#000';

  white = '#ebebeb';

  veryDarkGrey4 = '#171717';

  veryDarkGrey5 = '#0D0D0D';

  minute = 9.6;

  document.body.style.cursor = "auto";

  convertToPixel = function(time) {
    return time * minute;
  };

  getDate = function(modifier) {
    var date, dateInt;
    date = new Date();
    dateInt = date.getUTCDate();
    if ((dateInt + modifier) > 31 || (dateInt + modifier) <= 0) {
      dateInt = (dateInt + modifier) % 31;
    } else {
      dateInt += modifier;
    }
    return dateInt;
  };

  getTime = function(modifier) {
    var date, newTime, time;
    date = new Date();
    time = date.getHours();
    modifier = modifier + 48 * 100;
    if (modifier % 2) {
      time += (modifier - 1) / 2;
      time = time % 24;
      newTime = String(time) + ":00";
    } else {
      time += modifier / 2 - 1;
      time = time % 24;
      newTime = String(time) + ":30";
    }
    return newTime;
  };

  getDay = function(modifier) {
    var day, dayInt, dayString, fontColor, fontOpacity, fontOpacityDate, today;
    if (modifier === 0) {
      day = "Today";
      fontColor = white;
      fontOpacity = 1;
      fontOpacityDate = 1;
      return day;
    } else {
      dayString = "";
      today = new Date();
      dayInt = today.getUTCDay();
      dayInt += modifier;
      if (dayInt < 0) {
        dayInt = (dayInt + 7) % 7;
      }
      if (dayInt > 6) {
        dayInt %= 7;
      }
      switch (dayInt) {
        case 0:
          dayString = "Sunday";
          break;
        case 1:
          dayString = "Monday";
          break;
        case 2:
          dayString = "Tuesday";
          break;
        case 3:
          dayString = "Wednesday";
          break;
        case 4:
          dayString = "Thursday";
          break;
        case 5:
          dayString = "Friday";
          break;
        case 6:
          dayString = "Saturday";
      }
      return dayString.substring(0, 3);
    }
  };

  rowEvents = [];

  eventDivider = [];

  for (i = l = 0, ref = data.programmeData.channels.length; 0 <= ref ? l <= ref : l >= ref; i = 0 <= ref ? ++l : --l) {
    rowEvents.push(i);
    eventDivider.push(i);
  }

  for (i = m = 0, ref1 = rowEvents.length; 0 <= ref1 ? m <= ref1 : m >= ref1; i = 0 <= ref1 ? ++m : --m) {
    rowEvents[i] = [];
    eventDivider[i] = [];
  }

  eventTitle = [0, 1, 2, 3, 4, 5, 6];

  channelIdent = [];

  dateTrack = [];

  rowDivider = [];

  filterSelection = 0;

  filterSelected = 0;

  Framer.Defaults.Animation = {
    time: 0.3
  };

  channels = [];

  filterLayer = [];

  hX = 1;

  hY = 0;

  virtualCursor = 300;

  maxExpansion = 45;

  tunedChannel = 0;

  filter = ['All Channels', 'HD', 'Entertainment', "Children's", 'News', 'Films', 'Factual & Lifestyle', 'Radio', 'Shopping & Travel', 'Adult & Dating'];

  tuned = ['http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4'];

  Utils.interval(1, function() {
    return Framer.Device.setDeviceScale((Canvas.width / Screen.width) * 1, false);
  });

  cellHeight = 60;

  cellLeftPadding = 8;

  tvShow = new VideoLayer({
    x: 0,
    width: 1280,
    height: 720,
    backgroundColor: black,
    video: tuned[tunedChannel],
    index: -1
  });

  tvShow.center();

  tvShow.player.autoplay = true;

  tvShow.player.loop = true;

  tvShow.player.muted = true;

  background = new Layer({
    width: 1280,
    height: 720,
    x: 0,
    backgroundColor: null,
    clip: true
  });

  background.center();

  eventParent = new Layer({
    parent: background,
    y: 260,
    width: 1280,
    height: 460,
    index: 1,
    backgroundColor: null,
    clip: true
  });

  serviceList = new Layer({
    parent: eventParent,
    x: 64,
    y: 2,
    width: 224,
    height: 460,
    index: 4,
    backgroundColor: 'rgba(0, 0, 0, 0.5)'
  });

  divider = new Layer({
    parent: eventParent,
    width: 1280,
    height: 2,
    y: 0,
    index: -1,
    backgroundColor: veryDarkGrey4
  });

  header = new Layer({
    parent: background,
    x: 0,
    width: 1280,
    height: 226
  });

  dateTrackHeader = new Layer({
    parent: header,
    width: 1280,
    height: 162,
    backgroundColor: 'rgba(0, 48, 109, 0.50)',
    opacity: 0.85
  });

  dateTrackContainer = new Layer({
    parent: background,
    x: 40,
    y: 96,
    index: 10,
    height: 32,
    opacity: 1,
    backgroundColor: "transparent"
  });

  dayTrack = [];

  fillDateTrack = function() {
    var date, dateContainer, day, dayModifier, fontColor, fontOpacity, fontOpacityDate, n, newDate, newDay, results;
    dayModifier = -7;
    results = [];
    for (i = n = 0; n < 15; i = ++n) {
      fontColor = youviewGrey1;
      fontOpacity = 0.7;
      fontOpacityDate = 0.4;
      day = getDay(dayModifier);
      dateContainer = new Layer({
        parent: dateTrackContainer,
        width: 80,
        height: 48,
        x: i * 80,
        backgroundColor: 'transparent'
      });
      newDay = new TextLayer({
        name: day + dayModifier,
        parent: dateContainer,
        width: 80,
        height: 32,
        text: day,
        textAlign: "center",
        textTransform: "uppercase",
        fontFamily: "GillSans-Bold",
        fontSize: 16,
        letterSpacing: 1.92,
        color: fontColor,
        opacity: fontOpacity
      }, dayTrack.push(newDay));
      date = getDate(dayModifier);
      newDate = new TextLayer({
        parent: dateContainer,
        y: 24,
        width: 80,
        height: 16,
        text: date,
        textAlign: "center",
        textTransform: "uppercase",
        fontFamily: "GillSans-Bold, GillSans-Bold",
        fontSize: 16,
        letterSpacing: 1.92,
        color: white,
        opacity: fontOpacityDate
      });
      dayModifier++;
      results.push(dateTrack.push(dateContainer));
    }
    return results;
  };

  expansionTimeout = 0;

  nowLineTimeout = 0;

  legendTimeout = 0;

  unselectedSecondLineOpacity = 0.3;

  separatorOpacity = 0.2;

  fastScroll = 0;

  captureKeys = function() {
    return document.addEventListener('keydown', function(event) {
      var keyCode;
      keyCode = event.which;
      eventHandler(keyCode);
      return expansionTimeout = 0;
    });
  };

  dumbVariable = 0;

  eventHandler = Utils.throttle(0.2, function(keyCode) {
    var thisX, thisY;
    thisY = hY;
    thisX = hX;
    if (fastScroll === 4 && thisY > 0) {
      return engageHyperSpeed(keyCode);
    } else if (hyperSpeed === false) {
      switch (keyCode) {
        case 13:
          if (thisY >= 0) {
            return tune();
          } else if (thisY === -1) {
            return selectFilter();
          }
          break;
        case 39:
          legendTimeout = 0;
          hideLegend.start();
          goRight(thisX, thisY);
          return fastScroll++;
        case 37:
          legendTimeout = 0;
          hideLegend.start();
          goLeft(thisX, thisY);
          return fastScroll++;
        case 40:
          legendTimeout = 0;
          hideLegend.start();
          return goDown(thisX, thisY);
        case 38:
          legendTimeout = 0;
          hideLegend.start();
          return goUp(thisX, thisY);
        case 71:
          if (thisY >= 0) {
            return openGuide();
          }
          break;
        case 82:
          return record(thisX, thisY);
      }
    }
  });

  document.addEventListener('keyup', function(event) {
    var keyCode;
    keyCode = event.which;
    return closeHandler(keyCode);
  });

  closeHandler = function(keyCode) {
    var x, y;
    y = hY;
    x = hX;
    switch (keyCode) {
      case 39:
      case 37:
        fastScroll = 0;
        hyperSpeed = false;
        return disengageHyperSpeed(x, y);
    }
  };

  engageHyperSpeed = function(keyCode) {
    if (trackChanged === true) {
      hideEverything();
    }
    return scroll(keyCode);
  };

  timeElapsed = 1;

  timeTrack = new Layer({
    height: 34,
    width: 1280,
    y: 225,
    index: 6,
    opacity: 0.95,
    borderColor: 'transparent',
    backgroundColor: 'rgba(4, 44, 94, 0.4)'
  });

  timeContainer = new Layer({
    parent: timeTrack,
    backgroundColor: 'transparent'
  });

  timeContainer.states = {
    hide: {
      opacity: 0
    },
    show: {
      opacity: 0.95
    }
  };

  for (i = n = 1; n <= 4; i = ++n) {
    times = new TextLayer({
      name: 'time' + i,
      parent: timeContainer,
      x: convertToPixel(30) * i,
      y: 8,
      index: 4,
      height: 18,
      width: 55,
      text: getTime(i),
      textAlign: 'center',
      fontSize: 16,
      fontFamily: 'GillSans-Bold, GillSans-Bold',
      color: white
    });
  }

  dateModifier = 0;

  dayModifier = 0;

  trackChanged = false;

  selectedDate = 7;

  scrollingDay = new TextLayer({
    midX: Screen.midX - 27,
    y: 89,
    text: 'Today',
    textTransform: 'uppercase',
    fontFamily: "GillSans-Bold",
    color: white,
    fontSize: 24,
    textAlign: 'center',
    opacity: 0
  });

  scrollingDate = new TextLayer({
    y: 124,
    midX: Screen.midX - 27,
    opacity: 0,
    text: getDate(0),
    textTransform: 'uppercase',
    fontFamily: 'GillSans-Light',
    color: white,
    fontSize: 20,
    textAlign: 'center'
  });

  changeDay = function(change) {
    var newDay;
    if (selectedDate <= 13 && selectedDate >= 0) {
      dateTrack[selectedDate].children[1].opacity = 0.4;
      dateTrack[selectedDate].children[0].opacity = 0.7;
      selectedDate += change;
      dateTrack[selectedDate].children[1].opacity = 1;
      dateTrack[selectedDate].children[0].opacity = 1;
      newDay = parseInt(scrollingDate.text);
      scrollingDate.text = newDay + change;
      return scrollingDay.text = getDay(selectedDate);
    }
  };

  scroll = function(keyCode) {
    var forEachTime, k, o, ref2, results;
    hyperSpeed = true;
    if (trackChanged === false) {
      activeTimeTrack();
    }
    if (keyCode === 39) {
      if (timeContainer.children[1].y === -31) {
        timeElapsed += 1;
      }
      if (getTime(timeElapsed + 1) === '0:00') {
        changeDay(1);
      }
    } else if (keyCode === 37) {
      if (timeContainer.children[1].y === -31) {
        timeElapsed--;
      }
      if (getTime(timeElapsed + 1) === '0:00') {
        dayModifier--;
        changeDay(-1);
      }
    }
    forEachTime = -1;
    if (timeElapsed % 2) {
      results = [];
      for (k = o = 0, ref2 = timeContainer.children.length; 0 <= ref2 ? o < ref2 : o > ref2; k = 0 <= ref2 ? ++o : --o) {
        timeContainer.children[k].text = getTime(forEachTime + timeElapsed);
        results.push(forEachTime++);
      }
      return results;
    }
  };

  hideTime = new Animation({
    layer: timeContainer,
    properties: {
      opacity: 0
    },
    delay: 0.1
  });

  showTime = hideTime.reverse();

  activeTimeTrack = function() {
    hideTime.start();
    return trackChanged = true;
  };

  disengageHyperSpeed = Utils.throttle(1, function(x, y) {
    hyperSpeed = false;
    scrollingDay.animate({
      opacity: 0,
      options: {
        time: 0.5
      }
    });
    scrollingDate.animate({
      opacity: 0
    });
    return trackChanged = false;
  });

  timeTrackDefaults = function() {
    var o;
    for (i = o = 0; o <= 3; i = ++o) {
      timeContainer.children[i].y = 8;
      timeContainer.children[i].fontSize = 16;
      timeContainer.children[i].color = youviewGrey2;
    }
    timeContainer.children[1].opacity = 0.5;
    timeTrack.opacity = 0.95;
    return timeContainer.stateSwitch('show');
  };

  hideEverything = Utils.throttle(1, function() {
    var j, o, p, ref2, ref3;
    nowline.opacity = 0;
    for (i = o = 0, ref2 = channels.length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
      for (j = p = 0, ref3 = channels[i].children.length; 0 <= ref3 ? p < ref3 : p > ref3; j = 0 <= ref3 ? ++p : --p) {
        channels[i].children[j].animate({
          opacity: 0,
          options: {
            time: 0.1 * i
          }
        });
      }
    }
    dateTrackContainer.animate({
      opacity: 0
    });
    return filterContainer.animate({
      opacity: 0
    });
  });

  showEverything = Utils.throttle(1, function(x, y) {
    var j, o, p, ref2, ref3;
    nowline.opacity = 1;
    for (i = o = ref2 = channels.length - 1; ref2 <= 0 ? o <= 0 : o >= 0; i = ref2 <= 0 ? ++o : --o) {
      for (j = p = ref3 = channels[i].children.length - 1; ref3 <= 0 ? p <= 0 : p >= 0; j = ref3 <= 0 ? ++p : --p) {
        channels[i].children[j].animate({
          opacity: 1,
          options: {
            time: 0.1 * j
          }
        });
      }
    }
    styleHighlight(x, y);
    filterDividerBottom.stateSwitch('show');
    dateTrackContainer.animate({
      opacity: 1
    });
    return filterContainer.animate({
      opacity: 1
    });
  });

  openGuide = function() {
    if (background.opacity === 0) {
      return background.opacity = 1;
    } else {
      return background.opacity = 1;
    }
  };

  tune = function() {
    if (background.opacity === 1) {
      tunedChannel++;
      if (tunedChannel === tuned.length) {
        tunedChannel = 0;
      }
      tvShow.video = tuned[tunedChannel];
      return background.opacity = 0;
    }
  };

  styleHighlight = function(x, y, xMod, yMod) {
    var j, o, p, ref2, ref3, ref4;
    if (yMod === (0/0)) {
      yMod = 0;
    }
    if (xMod === (0/0)) {
      xMod = 0;
    }
    popOutHighlight.shadow2.color = 'rgba(0,0,0,0)';
    channels[selectedRow].backgroundColor = youviewBlue3;
    channels[selectedRow].opacity = 1;
    channelIdent[y].opacity = 1;
    rowEvents[y][x].turnOn();
    rowEvents[y][x].showOn();
    eventDivider[y][x].opacity = 0;
    if (((ref2 = eventDivider[y]) != null ? ref2[x + 1] : void 0) != null) {
      eventDivider[y][x + 1].opacity = 0;
    }
    if (xMod === 1 || xMod === -1) {
      changeVirtualCursor(x, y);
    }
    for (i = o = 0, ref3 = channelIdent.length; 0 <= ref3 ? o < ref3 : o > ref3; i = 0 <= ref3 ? ++o : --o) {
      for (j = p = 0, ref4 = channels[i].children.length; 0 <= ref4 ? p < ref4 : p > ref4; j = 0 <= ref4 ? ++p : --p) {
        channels[i].children[j].turnOff();
      }
    }
    if (rowEvents[y][x].x > serviceList.maxX) {
      popOutHighlight.x = rowEvents[y][x].x;
    } else {
      popOutHighlight.x = serviceList.maxX;
    }
    popOutHighlight.y = rowEvents[y][x].screenFrame.y;
    popOutHighlight.width = rowEvents[y][x].width;
    popOutHighlight.height = 60;
    popOutHighlight.borderRadius = 0;
    highlightTitle.x = 8;
    highlightTitle.y = 20;
    synopsis.visible = false;
    highlightStartEnd.visible = false;
    highlightTitle.text = rowEvents[y][x].children[0].text;
    highlightTitle.width = rowEvents[y][x].width - popOutPadding;
    synopsis.width = rowEvents[y][x].width - popOutPadding;
    highlightStartEnd.width = rowEvents[y][x].width - popOutPadding;
    hY = y;
    return hX = x;
  };

  popOutPadding = 16;

  popOutHighlight = new Layer({
    backgroundColor: '#0F5391',
    height: 60,
    shadow2: {
      y: 5,
      blur: 20,
      color: 'rgba(0,0,0,0)'
    }
  });

  highlightTitle = new TextLayer({
    parent: popOutHighlight,
    fontFamily: "GillSans",
    fontSize: 20,
    truncate: true,
    color: '#ebebeb',
    x: 8,
    y: 20,
    height: 26
  });

  highlightStartEnd = new TextLayer({
    parent: popOutHighlight,
    fontFamily: "GillSans-Bold",
    fontSize: 16,
    truncate: true,
    color: youviewGrey1,
    x: popOutPadding,
    y: 10,
    textTransform: 'uppercase',
    height: 26,
    text: '6:00 – 9:00PM',
    visible: false
  });

  synopsis = new TextLayer({
    parent: popOutHighlight,
    fontFamily: "GillSans",
    color: youviewGrey1,
    truncate: true,
    fontSize: 18,
    visible: false,
    y: 62,
    x: popOutPadding,
    height: 26,
    text: '5/8. Drama about midwives in 1960s London. Lucille must win the trust of a mother who is terrified of giving birth. Nurse Crane and Dr Turner encounter a suspected smallpox case. Also in HD.'
  });

  expansionCleverness = function(x, y) {
    popOutHighlight.borderRadius = 1;
    popOutHighlight.y -= 14;
    popOutHighlight.x -= 8;
    popOutHighlight.height = 94;
    popOutHighlight.shadow2.y = 5;
    popOutHighlight.shadow2.blur = 20;
    popOutHighlight.shadow2.color = 'rgba(0,0,0,0.4)';
    highlightTitle.x = popOutPadding;
    highlightTitle.y = 34;
    highlightStartEnd.x = popOutPadding;
    synopsis.x = popOutPadding;
    synopsis.visible = true;
    highlightStartEnd.visible = true;
    if (popOutHighlight.width < convertToPixel(maxExpansion) + popOutPadding) {
      popOutHighlight.width = convertToPixel(maxExpansion) + popOutPadding;
      highlightTitle.width = convertToPixel(maxExpansion) - popOutPadding;
      synopsis.width = convertToPixel(maxExpansion) - popOutPadding;
      return highlightStartEnd.width = convertToPixel(maxExpansion) - popOutPadding;
    }
  };

  goRight = function(x, y) {
    var ref2;
    if ((((ref2 = rowEvents[y]) != null ? ref2[x + 1] : void 0) != null) && y >= 0) {
      if (rowEvents[y][x + 1].x < 1280) {
        deselectCell(x, y);
        fixDividers(x, y);
        x++;
        return styleHighlight(x, y, 1);
      }
    } else if (y === -1 && filterSelection < filterLayer.length - 1) {
      filterSelection++;
      return highlightFilter(-1);
    }
  };

  selectedRow = 0;

  goLeft = function(x, y) {
    var ref2, ref3;
    if (((ref2 = rowEvents[y]) != null ? (ref3 = ref2[x - 1]) != null ? ref3.maxX : void 0 : void 0) > 298 && y >= 0) {
      deselectCell(x, y);
      fixDividers(x, y);
      x--;
      return styleHighlight(x, y, -1);
    } else if (y === -1 && filterSelection > 0) {
      filterSelection--;
      return highlightFilter(1);
    }
  };

  goDown = function(x, y) {
    var ref2;
    if ((((ref2 = rowEvents[y + 1]) != null ? ref2[x] : void 0) != null) && y !== -1) {
      deselectCell(x, y);
      channelIdent[y].opacity = 0.5;
      y++;
      if (selectedRow === 5 && y + 3 < rowEvents.length) {
        deselectRow(x, y, selectedRow, -1);
        return showNextRow(x, y);
      } else {
        deselectRow(x, y, selectedRow, -1);
        selectedRow++;
        x = checkHighlightPos(x, y);
        return styleHighlight(x, y);
      }
    } else if (y === -1) {
      y++;
      menuHighlight.animateStop();
      menuHighlight.width = 0;
      filterLayer[filterSelection].color = youviewGrey1;
      filterLayer[filterSelected].color = youviewBlue2;
      x = checkHighlightPos(x, y);
      return styleHighlight(x, y);
    }
  };

  goUp = function(x, y) {
    var ref2;
    if (((ref2 = rowEvents[y - 1]) != null ? ref2[x] : void 0) != null) {
      deselectCell(x, y);
      channelIdent[y].opacity = 0.5;
      y--;
      if (selectedRow === 1 && y !== 0) {
        deselectRow(x, y, selectedRow, 1);
        return showPreviousRow(x, y);
      } else {
        deselectRow(x, y, selectedRow, 1);
        selectedRow--;
        x = checkHighlightPos(x, y);
        return styleHighlight(x, y);
      }
    }
  };

  highlightFilter = function(oldFilterMod) {
    if (filterLayer[filterSelection] != null) {
      if (filterSelection + oldFilterMod !== filterSelected) {
        filterLayer[filterSelection + oldFilterMod].color = '#505359';
      } else {
        filterLayer[filterSelection + oldFilterMod].color = youviewBlue2;
      }
      filterLayer[filterSelection].color = youviewBlue;
      menuHighlight.y = 64;
      menuHighlight.x = filterLayer[filterSelection].midX;
      menuHighlight.width = 0;
      menuHighlightGlow.width = 0;
      menuHighlight.opacity = 1;
      menuHighlight.animationStop;
      return menuHighlight.animate({
        properties: {
          width: filterLayer[filterSelection].width,
          x: filterLayer[filterSelection].x
        },
        time: 0.4
      });
    }
  };

  selectFilter = function() {
    var y;
    y = 0;
    filterLayer[filterSelected].color = youviewGrey1;
    filterLayer[filterSelection].color = youviewBlue2;
    filterSelected = filterSelection;
    styleHighlight(x, y);
    menuHighlight.animateStop();
    return menuHighlight.width = 0;
  };

  showNextRow = function(x, y) {
    var j, lastChannel, lastEvent, o, p, ref2, ref3;
    for (i = o = 0, ref2 = channelIdent.length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
      channelIdent[i].y = channelIdent[i].y - (cellHeight + 2);
      for (j = p = 0, ref3 = channels[i].children.length; 0 <= ref3 ? p < ref3 : p > ref3; j = 0 <= ref3 ? ++p : --p) {
        channels[i].children[j].y -= cellHeight + 2;
      }
    }
    x = checkHighlightPos(x, y);
    document.removeAllListeners;
    lastChannel = channelIdent.length - 1;
    lastEvent = channels[lastChannel].children.length - 1;
    styleHighlight(x, y, 0, -1);
    return captureKeys();
  };

  showPreviousRow = function(x, y) {
    var j, o, p, ref2, ref3;
    for (i = o = 0, ref2 = channels.length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
      channelIdent[i].y += cellHeight + 2;
      for (j = p = 0, ref3 = channels[i].children.length; 0 <= ref3 ? p < ref3 : p > ref3; j = 0 <= ref3 ? ++p : --p) {
        channels[i].children[j].y += cellHeight + 2;
      }
    }
    document.removeAllListeners;
    x = checkHighlightPos(x, y);
    styleHighlight(x, y);
    return captureKeys();
  };

  record = function(x, y) {
    if (hY >= 0) {
      rowEvents[y][x].children[0].width -= 42;
      return rowEvents[y][x].children[0].x = 42;
    }
  };

  deselectCell = function(x, y) {
    var j, o, p, ref2, ref3, ref4, ref5, ref6, ref7, results;
    for (i = o = ref2 = x + 1, ref3 = rowEvents[y].length; ref2 <= ref3 ? o < ref3 : o > ref3; i = ref2 <= ref3 ? ++o : --o) {
      if (((ref4 = rowEvents[y]) != null ? ref4[i] : void 0) != null) {
        rowEvents[y][i].index = 3;
      }
    }
    if (((ref5 = rowEvents[y]) != null ? (ref6 = ref5[x]) != null ? ref6.x : void 0 : void 0) <= serviceList.maxX) {
      rowEvents[y][x].children[0].width = rowEvents[y][x].maxX - serviceList.maxX - 14;
    } else {
      rowEvents[y][x].children[0].width = convertToPixel(data.programmeData.channels[y][x].duration) - 14;
    }
    extension.opacity = 0;
    results = [];
    for (i = p = 0, ref7 = rowEvents.length; 0 <= ref7 ? p < ref7 : p > ref7; i = 0 <= ref7 ? ++p : --p) {
      results.push((function() {
        var q, ref10, ref11, ref12, ref8, ref9, results1;
        results1 = [];
        for (j = q = 0, ref8 = rowEvents[i].length; 0 <= ref8 ? q < ref8 : q > ref8; j = 0 <= ref8 ? ++q : --q) {
          if ((ref9 = rowEvents[y]) != null) {
            if ((ref10 = ref9[x]) != null) {
              ref10.turnOff();
            }
          }
          results1.push((ref11 = rowEvents[y]) != null ? (ref12 = ref11[x]) != null ? ref12.showOff() : void 0 : void 0);
        }
        return results1;
      })());
    }
    return results;
  };

  deselectRow = function(x, y, rowIndex, change) {
    var o, ref2, results;
    channels[rowIndex].backgroundColor = '';
    results = [];
    for (i = o = 0, ref2 = eventDivider[y + change].length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
      if (rowEvents[y + change][i].screenFrame.x >= serviceList.maxX + 2) {
        results.push(rowEvents[y + change][i].children[2].opacity = separatorOpacity);
      } else {
        results.push(rowEvents[y + change][i].children[2].opacity = 0);
      }
    }
    return results;
  };

  changeVirtualCursor = function(x, y) {
    if (rowEvents[y][x].x <= (serviceList.screenFrame.x + serviceList.width)) {
      return virtualCursor = serviceList.screenFrame.x + serviceList.width + convertToPixel(15);
    } else {
      return virtualCursor = Utils.round(rowEvents[y][x].x, 0) + 2;
    }
  };

  checkHighlightPos = function(x, y) {
    var o, ref2;
    for (i = o = 0, ref2 = rowEvents[y].length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
      if ((virtualCursor >= rowEvents[y][i].x) && (virtualCursor <= rowEvents[y][i].maxX)) {
        break;
      }
    }
    return i;
  };

  fixDividers = function(x, y) {
    var ref2;
    if (rowEvents[y][x].x > serviceList.maxX + 2) {
      eventDivider[y][x].opacity = 0.1;
    }
    if (((ref2 = eventDivider[y]) != null ? ref2[x + 1] : void 0) != null) {
      return eventDivider[y][x + 1].opacity = 0.1;
    }
  };

  nextX = 0;

  fillRows = function() {
    var event, j, o, p, ref2, ref3, results, rowContainer, separator, service, serviceNumber, title;
    results = [];
    for (i = o = 0, ref2 = data.programmeData.channels.length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
      rowContainer = new Layer({
        parent: eventParent,
        width: 1280,
        height: cellHeight,
        y: i * (cellHeight + 2) + 2,
        backgroundColor: '',
        index: 3
      });
      divider = new Layer({
        parent: eventParent,
        width: 1280,
        height: 2,
        index: 0,
        y: rowContainer.y + cellHeight,
        backgroundColor: 'rgba(18, 44, 54, 1)'
      });
      service = new Layer({
        parent: serviceList,
        x: 96,
        midY: rowContainer.midY + 80,
        opacity: 0.5,
        backgroundColor: '',
        html: "<div style='display:flex;justify-content:center;align-items:center;width:90px;height:38px;'><img src = 'images/channel_" + i + ".png'></div>"
      });
      serviceNumber = new TextLayer({
        parent: service,
        x: -70,
        y: 8,
        text: '00' + (i + 1),
        textAlign: 'center',
        fontSize: 20,
        letterSpacing: 0.42,
        fontFamily: "GillSans",
        index: 4,
        color: white,
        opacity: 0.5
      });
      channelIdent.push(service);
      channels.push(rowContainer);
      rowDivider.push(divider);
      for (j = p = 0, ref3 = data.programmeData.channels[i].length; 0 <= ref3 ? p < ref3 : p > ref3; j = 0 <= ref3 ? ++p : --p) {
        event = new Layer({
          parent: channels[i],
          x: nextX,
          width: convertToPixel(data.programmeData.channels[i][j].duration),
          height: cellHeight,
          backgroundColor: ''
        });
        event.turnOn = function() {
          return this.isOn = true;
        };
        event.turnOff = function() {
          return this.isOn = false;
        };
        event.showOn = function() {
          return this.backgroundColor = youviewBlue2;
        };
        event.showOff = function() {
          return this.backgroundColor = "";
        };
        event.toggleHighlight = function() {
          if (this.isOn === true) {
            return this.isOn = false;
          } else if (this.isOn === false) {
            return this.isOn = true;
          }
        };
        rowEvents[i].push(event);
        nextX = event.maxX;
        if (event.maxX > serviceList.maxX) {
          title = drawTitle(1, i, j);
        } else {
          title = drawTitle(0, i, j);
        }
        if (event.x > serviceList.maxX + 64) {
          separator = drawSeparator(0.1, i, j);
        } else {
          separator = drawSeparator(0, i, j);
        }
        eventDivider[i].push(separator);
      }
      results.push(nextX = 0);
    }
    return results;
  };

  drawTitle = function(isVisible, i, j) {
    var status, title;
    title = new TextLayer({
      parent: rowEvents[i][j],
      fontFamily: "GillSans",
      fontSize: 20,
      color: '#ebebeb',
      text: data.programmeData.channels[i][j].title,
      opacity: isVisible,
      truncate: true,
      x: cellLeftPadding,
      y: 20,
      index: 2,
      height: 26,
      width: rowEvents[i][j].width - 14
    });
    status = new Layer({
      parent: rowEvents[i][j],
      image: 'images/icon/episode-pending.png',
      height: 20,
      width: 20,
      x: 10,
      y: 22,
      opacity: 0
    });
    if (rowEvents[i][j].x < serviceList.maxX && rowEvents[i][j].maxX > serviceList.maxX) {
      title.x = -(rowEvents[i][j].x - serviceList.maxX) + cellLeftPadding;
      title.width = rowEvents[i][j].maxX - serviceList.maxX - 14;
      status.x = title.x;
    }
    return title;
  };

  drawSeparator = function(isVisible, i, j) {
    var separator;
    separator = new Layer({
      parent: rowEvents[i][j],
      width: 2,
      backgroundColor: youviewGrey2,
      opacity: separatorOpacity,
      height: cellHeight - 23,
      x: -2,
      y: 12,
      index: 0
    });
    return separator;
  };

  filters = new Layer({
    parent: header,
    width: 1280,
    height: 64,
    y: 162,
    index: 6,
    borderColor: 'transparent',
    backgroundColor: ''
  });

  filterContainer = new Layer({
    parent: filters,
    width: 1280,
    height: 64,
    backgroundColor: 'rgba(7, 15, 27, 0.88)'
  });

  for (i = o = 0, ref2 = filter.length; 0 <= ref2 ? o < ref2 : o > ref2; i = 0 <= ref2 ? ++o : --o) {
    filterText = new TextLayer({
      parent: filterContainer,
      name: filter[i],
      text: filter[i],
      autoSize: true,
      x: 138,
      y: 24,
      textTransform: "uppercase",
      fontFamily: "GillSans-Bold",
      fontSize: 16,
      color: '#505359'
    });
    if (i === 0) {
      filterText.color = '#ebebeb';
    }
    filterLayer.push(filterText);
    if (filterLayer[i - 1] != null) {
      filterLayer[i].x = filterLayer[i - 1].maxX + 40;
    }
  }

  nowline = new Layer({
    image: 'images/nowline.png',
    x: 460,
    y: 253,
    width: 99,
    height: 467,
    index: 6
  });

  filterDividerTop = new Layer({
    parent: background,
    image: 'images/filter-divider.png',
    y: 162,
    index: 10,
    height: 2,
    width: 1280
  });

  filterDividerBottom = new Layer({
    parent: background,
    y: 226,
    index: 10,
    image: 'images/filter-divider.png',
    height: 2,
    width: 1280
  });

  filterDividerBottom.states = {
    show: {
      opacity: 1
    },
    hide: {
      opacity: 0
    }
  };

  extension = new Layer({
    opacity: 0,
    index: 1
  });

  blackOverlay = new Layer({
    width: 1280,
    height: 720,
    backgroundColor: 'rgba(0,0,0,0.9)',
    index: 0
  });

  blueOverlay = new Layer({
    parent: eventParent,
    height: 720,
    width: 1280,
    opacity: 0.8,
    index: 1,
    style: {
      'background': 'linear-gradient(to bottom, rgba(0, 166, 255, 0.4) 0%, rgba(0, 166, 255, 0.1) 100%)'
    }
  });

  menuHighlight = new Layer({
    parent: filters,
    x: 0,
    width: 0,
    height: 2,
    backgroundColor: youviewBlue
  });

  menuHighlightGlow = new Layer({
    parent: menuHighlight,
    width: 0,
    height: 4,
    blur: 7,
    backgroundColor: youviewBlue
  });

  menuHighlightGlow.bringToFront();

  legend = new Layer({
    image: 'images/legend.png',
    maxY: Screen.height + 20,
    width: 1280,
    height: 114,
    opacity: 0
  });

  showLegend = new Animation(legend, {
    opacity: 1,
    duration: 0.5,
    maxY: Screen.height
  });

  hideLegend = showLegend.reverse();

  dumbVariable = 0;

  init = function() {
    fillRows();
    styleHighlight(1, 0);
    fillDateTrack();
    captureKeys();
    blackOverlay.sendToBack();
    tvShow.sendToBack();
    return nowline.bringToFront();
  };

  init();

  Utils.interval(0.5, function() {
    var thisX, thisY;
    thisY = hY;
    thisX = hX;
    nowLineTimeout++;
    if (nowLineTimeout === 6) {
      nowline.x += 1;
      nowLineTimeout = 0;
    }
    expansionTimeout = expansionTimeout + 1;
    if (expansionTimeout === 2 && thisY >= 0) {
      expansionCleverness(thisX, thisY);
    }
    legendTimeout++;
    if (legendTimeout === 4) {
      return showLegend.start();
    }
  });

  Canvas.image = 'https://struanfraser.co.uk/images/youview-back.jpg';

}).call(this);
