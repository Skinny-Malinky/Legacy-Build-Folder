<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Blog Name</title>
  <subtitle>Blog subtitle</subtitle>
  <id>http://blog.url.com/</id>
  <link href="http://blog.url.com/"/>
  <link href="http://blog.url.com/feed.xml" rel="self"/>
  <updated>2018-04-22T00:00:00+01:00</updated>
  <author>
    <name>Blog Author</name>
  </author>
  <entry>
    <title>TV &amp; Framer</title>
    <link rel="alternate" href="http://blog.url.com/tv-and-framer"/>
    <id>http://blog.url.com/tv-and-framer</id>
    <published>2018-04-22T00:00:00+01:00</published>
    <updated>2018-06-27T22:39:21+01:00</updated>
    <author>
      <name>Article Author</name>
    </author>
    <content type="html">&lt;p&gt;&lt;img src="http://struanfraser.co.uk/posts/2018/images/keyboard-input.gif" alt="A light blue gradient background with the words 'hello world', in white, appearing to type themselves."&gt;&lt;/p&gt;

&lt;h2&gt;Prototyping for TV&lt;/h2&gt;

&lt;hr&gt;

&lt;p&gt;Information about user research and prototyping for TV is lacking compared to mobile &amp;amp; web. Most of it is transferrable but ‚Äì at YouView ‚Äì we&amp;rsquo;ve encountered problems where we&amp;rsquo;ve had to innovate in order to achieve what&amp;rsquo;s standard practice on other platforms. One of the biggest barriers has been prototyping because we use infrared input and there aren&amp;rsquo;t any obvious, pre-packaged solutions for prototyping with a remote control.&lt;/p&gt;

&lt;p&gt;It feels like we&amp;rsquo;ve tried every prototyping tool under the sun &lt;em&gt;(R.I.P. Pixate ‚ö∞Ô∏è)&lt;/em&gt;. Using Axure we&amp;rsquo;d tied ourselves into the deepest, most convoluted conditional logic  that it was no longer feasible to return to a project. &lt;/p&gt;

&lt;p&gt;A screenshot of one of my colleague&amp;rsquo;s more complicated prototypes ‚Äì
&lt;img src="http://struanfraser.co.uk/posts/2018/images/axure-chaos.png" alt="Screenshot of Axure with hundreds of conditional statements in the right hand panel." class="no-shadow" loop="true" style="margin-bottom:0;"&gt;
&lt;span class="caption" style="margin-top: -0.2em;"&gt;Axure&amp;rsquo;s conditional chaos. And that&amp;rsquo;s a fraction of it.&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Axure was good in that it was one of the few prototyping tools that allowed for keyboard input. We&amp;rsquo;d discovered that you could buy a cheap infrared receiver called a &lt;a href="http://www.flirc.tv"&gt;FLIRC&lt;/a&gt; and that it could be used to convert infrared input into keyboard input. Perfect.&lt;/p&gt;

&lt;p&gt;We got by like this for some time and when we needed more intricate prototypes, we would hire contractors who weren&amp;rsquo;t from a design background. That made communication difficult.&lt;/p&gt;

&lt;h2&gt;Enter Framer.&lt;/h2&gt;

&lt;p&gt;Framer was introduced to me by a colleague who described it as,&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;pretty much javascript. If you can use that you might as well work on the set top box.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That was fairly intimidating but equipped with some decaying programming skills from school and a determination to stop using Axure (see above), I&amp;rsquo;d decided to stick with it.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;d stumbled upon &lt;a href="http://examples.framerjs.com/#event-keyboard-shortcuts.framer"&gt;this nifty little example&lt;/a&gt; which seemed to perfectly meet our needs. Unfortunately the syntax looked pretty dense compared to the mobile prototypes and it became fairly clear that Framer wasn&amp;rsquo;t designed for TV but we persevered. &lt;/p&gt;

&lt;video src="http://struanfraser.co.uk/posts/2018/video/flirc.mp4" alt="Struan uses an infrared remote control to interact with a Framer prototype of YouView's TV Guide" controls="true" class="full-width" loop="true"&gt;&lt;/video&gt;

&lt;p&gt;&lt;span class="caption"&gt;Using FLIRC with a YouView TV Guide prototype&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;A year of learning later and we&amp;rsquo;re finding it&amp;rsquo;s quite hard to get an entire design team ‚Äì with little knowledge of object oriented programming ‚Äì to use a tool to do something for which it wasn&amp;rsquo;t designed. Keyboard input creates a whole host of problems, such as repeating input and complicated syntax, so we came up with a &lt;em&gt;(hopefully)&lt;/em&gt; simpler solution than Framer had previously offered.&lt;/p&gt;

&lt;blockquote class="twitter-tweet" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;Using a remote control with framer üòé by &lt;a href="https://twitter.com/struanfraser?ref_src=twsrc%5Etfw"&gt;@struanfraser&lt;/a&gt; uhuuuu I want to try that too &lt;a href="https://twitter.com/hashtag/framerlondon?src=hash&amp;amp;ref_src=twsrc%5Etfw"&gt;#framerlondon&lt;/a&gt; &lt;a href="https://t.co/alxncDo4Mq"&gt;pic.twitter.com/alxncDo4Mq&lt;/a&gt;&lt;/p&gt;&amp;mdash; Marie Schweiz (@ma_rylou) &lt;a href="https://twitter.com/ma_rylou/status/988867630500057091?ref_src=twsrc%5Etfw"&gt;April 24, 2018&lt;/a&gt;&lt;/blockquote&gt;

&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;

&lt;h2&gt;Keyboard Input for Framer&lt;/h2&gt;

&lt;p&gt;After many prototypes I felt like I&amp;rsquo;d come to a conclusion about how I wanted to use keyboard input in a way that was relatively similar to Framer&amp;rsquo;s existing syntax. It still requires a knowledge of functions which I think was a bit of a stumbling block. That said, you only have to write one line of code for each key which simplifies things considerably ‚Äì&lt;/p&gt;

&lt;h3&gt;The Old Way&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;enter = 13
document.addEventListener 'keydown', (event) -&amp;gt;
    keyCode = event.which
    eventHandler(keyCode)
    event.preventDefault()
eventHandler = Utils.throttle 0.3, (keyCode) -&amp;gt;
    switch keyCode
        when enter
            doSomething()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The New Way&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre class="highlight plaintext"&gt;&lt;code&gt;&lt;table class="rouge-table"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class="rouge-gutter gl"&gt;&lt;pre class="lineno"&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class="rouge-code"&gt;&lt;pre&gt;keyboard.onKey(keyboard.enter, doSomething, 0.3)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;rsquo;ve written a more comprehensive guide on how to use the module on Github so if the module sounds like something you&amp;rsquo;d be interested in, take a look ‚Äì&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/Skinny-Malinky/Keyboard-Input-for-Framer"&gt;&lt;img src="http://struanfraser.co.uk/posts/2018/images/keyboard-input.gif" alt="A light blue gradient background with the words 'hello world', in white, appearing to type themselves."&gt;
&lt;span class = "caption"&gt;Get the Module&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
</feed>
